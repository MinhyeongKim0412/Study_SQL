/*
 - 저장 프로시져 (Stored Procedure)
   . 쿼리문들의 집합으로, 수행하고자 하는 쿼리를 데이터베이스에 등록 후 
     원하는 데이터 베이스 트랜잭션을 일괄적으로 처리할 때 사용 
      
 - 장점
   1. 성능의 향상.
      . 저장 프로시저 첫 실행 시 캐시(메모리)에 저장
	  . 이후 호출 할때는 캐시(메모리)에 있는 내용을 수행하여 실행속도 향상됨. 
   2. 유지보수 및 재활용 용이
      . 응용 프로그램 코드 에서 SQL 문을 수정 하지 않아도 됨
	  . 한번 만들어두고 함수처럼 인수와 인자 값에 따른 데이터 관리 가 용이하다. 
   3. 보안 
      . DB 서버에 저장 해두어 임의 사용자로인한 변질을 방지 
   4. 클라이언트 부하 절감
      . 응용 프로그램에서는 스토어프로시져 이름만 호출하고 처리는 DB 에 저장된 프로시져 SQL 로 처리 하므로 
	    네트워크 상의 부하를 줄일 수 있음.  */
		 
 



-- 1. 프로시져 만들기 
-- 편집기 를 통한 프로시저 만들기 DB -> Procedures -> Create Procedure

 

/* ***********************************************************************************
 *  반환 값을 가지는 프로시저 
 *  . 파라매터 를 반환형(OUT) 으로 설정하여 결과 를 반환한다.
 **************************************************************************************/

-- 2. SQL 구문으로 생성하기  
-- 긴 코드의 경우 ; 를 만났을 경우 프로세스를 중단한다. 
-- 구분자를 $$로  임시로 변경하여 일괄 등록 할수 있도록 하는 명령어
DROP PROCEDURE IF EXISTS SP_ItemMaster_S;  
DELIMITER $$
CREATE PROCEDURE SP_ItemMaster_S
(
    -- 파라매터(인자) 설정 부분 [인자명] [데이터유형]
    P_itemcode varchar(30)
)
BEGIN
 -- =============================================
 -- Author:	     동상현
 -- Create date: 2024-05-10
 -- Description: 프로시져 만들기 실습. 
 -- ============================================= 
	SELECT * 
      FROM t_itemmaster
     WHERE itemcode like concat(P_itemcode,'%');
END $$  
-- 구분자를 다시 세미콜론(;)으로 변경
DELIMITER ; 
-- 모두 작성 후 alt+x 

-- 3.프로시저의 실행
CALL SP_ItemMaster_S('12'); -- '12' 인수를 전달받아 12 로 시작하는 데이터 를 조회 
 

-- 4. 프로시저 삭제 
DROP PROCEDURE IF EXISTS SP_ItemMaster_S;  

-- ALTER 명령은 스토어드 프로시저에서 제공하는 보안 및 작동 방식과 관련된 특성을 수정할 때만 사용
-- 편집기 창에서 수정 시 삭제 후 다시 생성.
 

 


/* ***********************************************************************************
 *  반환 값을 가지는 프로시저 
    . 파라매터 를 반환형(OUT) 으로 설정하여 결과 를 반환한다.
 **************************************************************************************/

DROP PROCEDURE IF EXISTS sp_AddNumbers;  
DELIMITER $$
CREATE PROCEDURE sp_AddNumbers(
    IN num1 INT,
    IN num2 INT,
    OUT result INT
)
BEGIN
    SET result = num1 + num2;
END $$

DELIMITER ;

  
	
-- 출력 변수 선언
SET @output = 0;

-- 프로시저 호출.
CALL sp_AddNumbers(10, 20, @output);

-- 결과 확인.
SELECT @output; 




